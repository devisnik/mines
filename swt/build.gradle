apply plugin: 'application'

archivesBaseName = "de.devisnik.mine.swt"
version = '1.0'
sourceCompatibility = 1.8

def windowingLibrary = getSWTWindowingLibrary(System.properties['os.name'])
def platform = getSWTPlatform(System.properties['os.name'])
def architecture = getSWTArch(System.properties['os.arch'])
def version = '3.128.0'
def swtArtifactName = "org.eclipse.swt.${windowingLibrary}.${platform}.${architecture}:${version}"

dependencies {
    implementation project(':model')
    implementation project(':robot')
    implementation "org.eclipse.platform:${swtArtifactName}"
}

mainClassName = 'de.devisnik.mine.swt.MinesScreen'
if (platform == 'macosx') {
    applicationDefaultJvmArgs = ['-XstartOnFirstThread']
}

configurations.all {
    resolutionStrategy {
        dependencySubstitution {
            substitute module('org.eclipse.platform:org.eclipse.swt.${osgi.platform}') using  module("org.eclipse.platform:${swtArtifactName}")
        }
    }
}

static String getSWTWindowingLibrary(String platform) {
    switch (platform.replaceAll(' ', '').toLowerCase()) {
        case ~/.*linux.*/: return 'gtk'
        case ~/.*darwin.*/: return 'cocoa'
        case ~/.*osx.*/: return 'cocoa'
        case ~/.*win.*/: return 'win32'
        default: return null
    }
}

static String getSWTArch(String arch) {
    switch (arch) {
        case 'aarch64': return arch
        case ~/.*64.*/: return 'x86_64'
        default: return 'x86'
    }
}

static String getSWTPlatform(String platform) {
    switch (platform.replaceAll(' ', '').toLowerCase()) {
        case ~/.*linux.*/: return 'linux'
        case ~/.*darwin.*/: return 'macosx'
        case ~/.*osx.*/: return 'macosx'
        case ~/.*win.*/: return 'win32'
        default: return platform
    }
}

java.targetCompatibility = JavaVersion.VERSION_1_8
